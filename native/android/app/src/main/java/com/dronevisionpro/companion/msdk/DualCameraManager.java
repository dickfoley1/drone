package com.dronevisionpro.companion.msdk;\n\nimport android.util.Log;\n\nimport com.autel.sdk.CommonCallback;\nimport com.autel.sdk.product.BaseProduct;\nimport com.autel.sdk.camera.CameraManager;\nimport com.autel.sdk.camera.bean.CameraType;\nimport com.autel.sdk.camera.bean.CameraMode;\nimport com.autel.sdk.camera.bean.PhotoFileFormat;\nimport com.autel.sdk.camera.bean.VideoResolution;\n\nimport com.google.gson.JsonObject;\n\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Dual camera manager for synchronized RGB + Thermal capture\n * Handles EVO Lite 640T Enterprise dual camera system\n */\npublic class DualCameraManager {\n    private static final String TAG = \"DualCameraManager\";\n    private static final int SYNC_TIMEOUT_MS = 5000; // 5 second timeout for synchronized capture\n    \n    private BaseProduct product;\n    private CameraManager rgbCameraManager;\n    private CameraManager thermalCameraManager;\n    \n    private AtomicBoolean isCapturing = new AtomicBoolean(false);\n    private AtomicBoolean isRecording = new AtomicBoolean(false);\n    \n    // Camera capture callbacks\n    public interface DualCaptureCallback {\n        void onDualCaptureComplete(String sessionId, String rgbImagePath, String thermalImagePath);\n        void onDualCaptureFailed(String sessionId, String error);\n        void onCameraStateChanged(CameraType cameraType, boolean available);\n    }\n    \n    private DualCaptureCallback captureCallback;\n    \n    public DualCameraManager(BaseProduct product) {\n        this.product = product;\n        initializeCameras();\n    }\n    \n    /**\n     * Initialize RGB and thermal camera managers\n     */\n    private void initializeCameras() {\n        try {\n            // RGB camera (main camera)\n            rgbCameraManager = product.getCameraManager(CameraType.RGB);\n            if (rgbCameraManager != null) {\n                Log.i(TAG, \"RGB camera initialized\");\n                setupRGBCamera();\n            } else {\n                Log.e(TAG, \"RGB camera not available\");\n            }\n            \n            // Thermal camera (IR camera)\n            thermalCameraManager = product.getCameraManager(CameraType.THERMAL);\n            if (thermalCameraManager != null) {\n                Log.i(TAG, \"Thermal camera initialized\");\n                setupThermalCamera();\n            } else {\n                Log.e(TAG, \"Thermal camera not available\");\n            }\n            \n        } catch (Exception e) {\n            Log.e(TAG, \"Failed to initialize cameras\", e);\n        }\n    }\n    \n    /**\n     * Configure RGB camera settings for optimal capture\n     */\n    private void setupRGBCamera() {\n        if (rgbCameraManager == null) return;\n        \n        // Set photo capture mode\n        rgbCameraManager.setCameraMode(CameraMode.PHOTO, new CommonCallback<Boolean>() {\n            @Override\n            public void onSuccess(Boolean result) {\n                Log.d(TAG, \"RGB camera set to photo mode\");\n            }\n            \n            @Override\n            public void onFailure(String error) {\n                Log.e(TAG, \"Failed to set RGB camera mode: \" + error);\n            }\n        });\n        \n        // Set high-quality JPEG format\n        rgbCameraManager.setPhotoFileFormat(PhotoFileFormat.JPEG, new CommonCallback<Boolean>() {\n            @Override\n            public void onSuccess(Boolean result) {\n                Log.d(TAG, \"RGB camera format set to JPEG\");\n            }\n            \n            @Override\n            public void onFailure(String error) {\n                Log.e(TAG, \"Failed to set RGB camera format: \" + error);\n            }\n        });\n    }\n    \n    /**\n     * Configure thermal camera settings\n     */\n    private void setupThermalCamera() {\n        if (thermalCameraManager == null) return;\n        \n        // Set thermal camera to photo mode\n        thermalCameraManager.setCameraMode(CameraMode.PHOTO, new CommonCallback<Boolean>() {\n            @Override\n            public void onSuccess(Boolean result) {\n                Log.d(TAG, \"Thermal camera set to photo mode\");\n            }\n            \n            @Override\n            public void onFailure(String error) {\n                Log.e(TAG, \"Failed to set thermal camera mode: \" + error);\n            }\n        });\n        \n        // Configure thermal-specific settings\n        // Note: Thermal camera may have different format options (IRX, TIFF, etc.)\n        try {\n            // Enable temperature measurement mode for accurate thermal data\n            thermalCameraManager.setThermalMeasurementMode(true, new CommonCallback<Boolean>() {\n                @Override\n                public void onSuccess(Boolean result) {\n                    Log.d(TAG, \"Thermal measurement mode enabled\");\n                }\n                \n                @Override\n                public void onFailure(String error) {\n                    Log.w(TAG, \"Could not enable thermal measurement mode: \" + error);\n                }\n            });\n        } catch (Exception e) {\n            Log.w(TAG, \"Thermal measurement mode not supported\", e);\n        }\n    }\n    \n    /**\n     * Perform synchronized dual camera capture\n     * Captures RGB and thermal images with timestamp matching\n     */\n    public void captureSync(String sessionId, DualCaptureCallback callback) {\n        if (isCapturing.get()) {\n            Log.w(TAG, \"Capture already in progress\");\n            if (callback != null) {\n                callback.onDualCaptureFailed(sessionId, \"Capture already in progress\");\n            }\n            return;\n        }\n        \n        if (rgbCameraManager == null || thermalCameraManager == null) {\n            Log.e(TAG, \"Cameras not available for dual capture\");\n            if (callback != null) {\n                callback.onDualCaptureFailed(sessionId, \"Cameras not available\");\n            }\n            return;\n        }\n        \n        this.captureCallback = callback;\n        isCapturing.set(true);\n        \n        Log.i(TAG, \"Starting synchronized dual capture: \" + sessionId);\n        \n        // Use CountDownLatch for synchronization\n        CountDownLatch captureLatch = new CountDownLatch(2);\n        \n        // Results storage\n        final String[] rgbImagePath = new String[1];\n        final String[] thermalImagePath = new String[1];\n        final String[] captureError = new String[1];\n        \n        long captureTimestamp = System.currentTimeMillis();\n        \n        // Capture RGB image\n        rgbCameraManager.takePhoto(new CommonCallback<String>() {\n            @Override\n            public void onSuccess(String imagePath) {\n                Log.d(TAG, \"RGB capture successful: \" + imagePath);\n                rgbImagePath[0] = imagePath;\n                captureLatch.countDown();\n            }\n            \n            @Override\n            public void onFailure(String error) {\n                Log.e(TAG, \"RGB capture failed: \" + error);\n                captureError[0] = \"RGB capture failed: \" + error;\n                captureLatch.countDown();\n            }\n        });\n        \n        // Capture thermal image (slight delay to avoid interference)\n        new Thread(() -> {\n            try {\n                Thread.sleep(50); // 50ms delay for camera sync\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n            \n            thermalCameraManager.takePhoto(new CommonCallback<String>() {\n                @Override\n                public void onSuccess(String imagePath) {\n                    Log.d(TAG, \"Thermal capture successful: \" + imagePath);\n                    thermalImagePath[0] = imagePath;\n                    captureLatch.countDown();\n                }\n                \n                @Override\n                public void onFailure(String error) {\n                    Log.e(TAG, \"Thermal capture failed: \" + error);\n                    if (captureError[0] == null) {\n                        captureError[0] = \"Thermal capture failed: \" + error;\n                    }\n                    captureLatch.countDown();\n                }\n            });\n        }).start();\n        \n        // Wait for both captures to complete\n        new Thread(() -> {\n            try {\n                boolean completed = captureLatch.await(SYNC_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n                \n                if (!completed) {\n                    Log.e(TAG, \"Dual capture timeout\");\n                    finalizeDualCapture(sessionId, null, null, \"Capture timeout\");\n                    return;\n                }\n                \n                if (captureError[0] != null) {\n                    Log.e(TAG, \"Dual capture failed: \" + captureError[0]);\n                    finalizeDualCapture(sessionId, null, null, captureError[0]);\n                    return;\n                }\n                \n                if (rgbImagePath[0] != null && thermalImagePath[0] != null) {\n                    Log.i(TAG, \"Dual capture completed successfully\");\n                    finalizeDualCapture(sessionId, rgbImagePath[0], thermalImagePath[0], null);\n                } else {\n                    Log.e(TAG, \"Dual capture incomplete - missing image paths\");\n                    finalizeDualCapture(sessionId, null, null, \"Incomplete capture\");\n                }\n                \n            } catch (InterruptedException e) {\n                Log.e(TAG, \"Dual capture interrupted\", e);\n                Thread.currentThread().interrupt();\n                finalizeDualCapture(sessionId, null, null, \"Capture interrupted\");\n            }\n        }).start();\n    }\n    \n    /**\n     * Finalize dual capture and invoke callback\n     */\n    private void finalizeDualCapture(String sessionId, String rgbPath, String thermalPath, String error) {\n        isCapturing.set(false);\n        \n        if (captureCallback != null) {\n            if (error != null) {\n                captureCallback.onDualCaptureFailed(sessionId, error);\n            } else {\n                captureCallback.onDualCaptureComplete(sessionId, rgbPath, thermalPath);\n            }\n        }\n    }\n    \n    /**\n     * Start synchronized dual video recording\n     */\n    public void startDualRecording(String sessionId, DualCaptureCallback callback) {\n        if (isRecording.get()) {\n            Log.w(TAG, \"Recording already in progress\");\n            return;\n        }\n        \n        if (rgbCameraManager == null || thermalCameraManager == null) {\n            Log.e(TAG, \"Cameras not available for recording\");\n            return;\n        }\n        \n        isRecording.set(true);\n        Log.i(TAG, \"Starting dual video recording: \" + sessionId);\n        \n        // Start RGB recording\n        rgbCameraManager.startVideoRecording(new CommonCallback<Boolean>() {\n            @Override\n            public void onSuccess(Boolean result) {\n                Log.d(TAG, \"RGB recording started\");\n            }\n            \n            @Override\n            public void onFailure(String error) {\n                Log.e(TAG, \"RGB recording failed: \" + error);\n            }\n        });\n        \n        // Start thermal recording\n        thermalCameraManager.startVideoRecording(new CommonCallback<Boolean>() {\n            @Override\n            public void onSuccess(Boolean result) {\n                Log.d(TAG, \"Thermal recording started\");\n            }\n            \n            @Override\n            public void onFailure(String error) {\n                Log.e(TAG, \"Thermal recording failed: \" + error);\n            }\n        });\n    }\n    \n    /**\n     * Stop synchronized dual video recording\n     */\n    public void stopDualRecording() {\n        if (!isRecording.get()) {\n            Log.w(TAG, \"No recording in progress\");\n            return;\n        }\n        \n        isRecording.set(false);\n        Log.i(TAG, \"Stopping dual video recording\");\n        \n        // Stop RGB recording\n        if (rgbCameraManager != null) {\n            rgbCameraManager.stopVideoRecording(new CommonCallback<String>() {\n                @Override\n                public void onSuccess(String videoPath) {\n                    Log.d(TAG, \"RGB recording stopped: \" + videoPath);\n                }\n                \n                @Override\n                public void onFailure(String error) {\n                    Log.e(TAG, \"Failed to stop RGB recording: \" + error);\n                }\n            });\n        }\n        \n        // Stop thermal recording\n        if (thermalCameraManager != null) {\n            thermalCameraManager.stopVideoRecording(new CommonCallback<String>() {\n                @Override\n                public void onSuccess(String videoPath) {\n                    Log.d(TAG, \"Thermal recording stopped: \" + videoPath);\n                }\n                \n                @Override\n                public void onFailure(String error) {\n                    Log.e(TAG, \"Failed to stop thermal recording: \" + error);\n                }\n            });\n        }\n    }\n    \n    /**\n     * Check if cameras are available and ready\n     */\n    public boolean areCamerasReady() {\n        return rgbCameraManager != null && thermalCameraManager != null;\n    }\n    \n    /**\n     * Get camera capabilities and status\n     */\n    public JsonObject getCameraStatus() {\n        JsonObject status = new JsonObject();\n        \n        status.addProperty(\"rgbAvailable\", rgbCameraManager != null);\n        status.addProperty(\"thermalAvailable\", thermalCameraManager != null);\n        status.addProperty(\"isCapturing\", isCapturing.get());\n        status.addProperty(\"isRecording\", isRecording.get());\n        \n        if (rgbCameraManager != null) {\n            JsonObject rgbStatus = new JsonObject();\n            rgbStatus.addProperty(\"mode\", \"photo\"); // Get actual mode from camera\n            rgbStatus.addProperty(\"format\", \"JPEG\");\n            status.add(\"rgb\", rgbStatus);\n        }\n        \n        if (thermalCameraManager != null) {\n            JsonObject thermalStatus = new JsonObject();\n            thermalStatus.addProperty(\"mode\", \"photo\");\n            thermalStatus.addProperty(\"measurementMode\", true);\n            status.add(\"thermal\", thermalStatus);\n        }\n        \n        return status;\n    }\n    \n    /**\n     * Cleanup dual camera manager\n     */\n    public void cleanup() {\n        Log.i(TAG, \"Cleaning up dual camera manager\");\n        \n        // Stop any active recording\n        if (isRecording.get()) {\n            stopDualRecording();\n        }\n        \n        // Cancel any active capture\n        isCapturing.set(false);\n        \n        captureCallback = null;\n        rgbCameraManager = null;\n        thermalCameraManager = null;\n    }\n}